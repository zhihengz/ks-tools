#Generated by Kickstart Configurator
#platform=x86, AMD64, or Intel EM64T

#System  language
lang en_US
#Language modules to install
langsupport en_US
#System keyboard
keyboard us
#System mouse
mouse
#Sytem timezone
timezone America/Chicago
#Root password
rootpw --iscrypted $1$WZqVAted$bJfO4cTo5hANS3it2hx4A.
#Install OS instead of upgrade
install
#Use CDROM installation Media
cdrom
#Clear the Master Boot Record
zerombr yes
# **** Partitions are now created from %include file
%include /tmp/ks.part
#System authorization infomation
auth  --useshadow  --enablemd5 
#Network information
#network --bootproto=dhcp --device=eth0
%include /tmp/network.ks
#Firewall configuration
firewall --disabled 
# SELinux configuration
selinux --disabled
#XWindows configuration information
#xconfig --depth=32 --resolution=1024x768 --defaultdesktop=GNOME --startxonboot --monitor="Monitor 1600x1200"
xconfig --depth=32 --resolution=1024x768 --defaultdesktop=GNOME --monitor="Monitor 1600x1200"
#Package install information
%packages --resolvedeps
@ base
@ core
@ server
@ base-x 
@ gnome-desktop
@ system-tools
@ compat-arch-support
@ rhcs
@ graphical-internet
#-- To make fence works --------------------------------
perl-Crypt-SSLeay
UpForLinux
#----- Provides support for DB such as Oracle and Sybase
gcc
gcc-c++
glibc
libstdc++
libstdc++-devel
sysstat
#---- for Sybase IQ ------------------------------------
##compat-libstdc++-296
#-------------------------------------------------------------------------
# ----- JIRA - CMUN-829 request ------------------------------------------
perl-suidperl
UpForLinux
#-------------------------------------------------------------------------
# O2/Vodafone requirements 
-ftp
-vnc-server
vsftpd
bind
# CMUN-4565 O2 requirements 
-gnome-session 
-gnome-volume-manager 
-control-center 
-nautilus-media 
-nautilus-cd-burner 
-nautilus 
-gnome-vfs2-smb 
-samba-client 
-samba-common 
-system-config-samba 
-samba 
-gedit 
-libexif 
-hal-cups-utils 
-libgnomecups 
-libgnomeprint22 
-libgnomeprintui22 
-mysql 
-php 
-php-ldap 
-php-pear 
-piranha 
-firefox 
-gphoto2 
-gthumb 
-eog 
-librsvg2 
-eel2 
-gdm 
-gtksourceview 
-cyrus-sasl-sql 
# End CMUN-4565 O2 requirements 
%pre --interpreter /usr/bin/python
#(
# generate the partition information to a ks.part file
import os, sys
import re
sys.path.append('/usr/lib/anaconda')
import isys
actualDrives = isys.hardDriveDict()
installDrive = actualDrives.keys()[0]
preferedDrives = "cciss/c0d0", "sda", "hda"
rm_qla_module = "rmmod qla2300"
for drive in preferedDrives:
	if actualDrives.has_key(drive): installDrive=drive; break;

#mknodCMD="mknod /dev/%s b 8 0" % (installDrive,)
#os.system(mknodCMD)
#clearCMD="dd if=/dev/zero of=/dev/%s bs=512 count=1" % (installDrive,)
#os.system(clearCMD)
os.system(rm_qla_module)
f = open("/tmp/ks.part", "w")
if installDrive == "cciss/c0d0": f.write("ignoredisk --drives=sda,sdb,sdc,sdd\n");
f.write("bootloader --location=mbr --driveorder=%s\n" %(installDrive,))
f.write("clearpart --drives=%s --all --initlabel\n" %(installDrive,))
f.write("part /boot --fstype ext3 --size=104 --ondisk %s\n" %(installDrive,))
#f.write("part swap --recommended --ondisk %s\n" %(installDrive,))
f.write("part /dump --fstype ext3 --size=6144 --ondisk %s\n" %(installDrive,))
f.write("part pv.01 --size=26628 --ondisk %s\n" %(installDrive,))
f.write("volgroup VG01 --pesize=2048 pv.01\n")
f.write("logvol swap --fstype swap --name=LV_SWAP --vgname=VG01 --size=4096\n")
f.write("logvol / --fstype ext3 --name=LV_ROOT --vgname=VG01 --size=2048\n")
f.write("logvol /usr --fstype ext3 --name=LV_USR --vgname=VG01 --size=4096\n")
f.write("logvol /opt --fstype ext3 --name=LV_OPT --vgname=VG01 --size=6144\n")
f.write("logvol /tmp --fstype ext3 --name=LV_TMP --vgname=VG01 --size=4096\n")
f.write("logvol /var --fstype ext3 --name=LV_VAR --vgname=VG01 --size=6144\n")
f.close()

#-- getting the network configuration data from the command line
#-- this is still Python code

ip=""
gw=""
nm="255.255.255.0"
ns=""
cmd_line=""
f = open("/proc/cmdline","r")
cmd_line = f.read()
f.close()

f = open("/tmp/network.ks","w")
f.write("#-- network.ks  ----------------------------------------\n")
f.write("#cmd_line=%s\n" % cmd_line)
f.write("#-- Processed network configuration data  --------------\n")
my_ip = r'(?<=(IP|ip)\=)((\d{1,3}\.){3}\d{1,3})'
#my_gw = r'(GATEWAY|gateway)\=(\d{1,3}\.){3}\d{1,3}'
my_gw = r'(?<=(GATEWAY|gateway)\=)((\d{1,3}\.){3}\d{1,3})'
my_ns = r'(?<=(NAMESERVER|nameserver)\=)((\d{1,3}\.){3}\d{1,3})'
my_nm = r'(?<=(NETMASK|netmask)\=)((\d{1,3}\.){3}\d{1,3})'

try:
        ip=re.search(my_ip,cmd_line).group(0)
except Exception,e :
	f.write("#Exception in getting the \"ip\" attribute:%s,ip=%s\n" % (str(e), ip))
print ("ip=%s\n" % ip)
try:
        gw=re.search(my_gw,cmd_line).group(0)
except Exception,e :
	f.write("#Exception in getting the \"gateway\" attribute:%s,gw=%s\n" % (str(e), gw))
print ("gw=%s\n" % gw)
try:
        nm=re.search(my_nm,cmd_line).group(0)
except Exception,e :
	f.write("#Exception in getting the \"netmask\" attribute:%s,nm=%s\n" % (str(e), nm))
print ("nm=%s\n" % nm)

try:
        ns=re.search(my_ns,cmd_line).group(0)
except Exception,e :
	f.write("#Exception in getting the \"nameserver\" attribute:%s,ns=%s\n" % (str(e), ns))
print ("ns=%s\n" % ns)

if  len(ip) == 0 or len(gw) == 0 or len(ns) == 0 :
        f.write("#DHCP network configuration ip=%s,gw=%s,ns=%s\n" % (ip , nm , gw , ns) )
        f.write("network --bootproto=dhcp --device=eth0\n")
elif  len(ip) > 0 and len(gw) > 0 and len(ns) > 0 :
        f.write("#IP static network configuration\n")
        f.write("network --bootproto=static --device=eth0 --ip=%s --netmask=%s --gateway=%s --nameserver=%s\n" % (ip , nm , gw , ns) )
else:
        f.write("#Error in parsing the command line `cat /proc/cmdline`\n")

f.write("#-- network.ks END --------------\n")
f.close()
#) 2>&1 | tee -a /tmp/ks-pre-install.log 
#-- end of pre-install section ---------------------------------------------
#-- POST INSTALL SECTION ---------------------------------------------------
%post
(
# -- Disabled Services (2.3.12-1) ------------------------------------------
for service in cups exim pcmcia kudzu sysstat
do
  chkconfig $service off
done

# -- Enabled Services (2.3.12-2) -------------------------------------------
chkconfig --level 345 ntpd on
chkconfig --level 3 snmpd on

# -- System info section ============================================
mkdir -p /var/system-info
cat <<END-CMD >>/var/system-info/ks-cmd-name.txt
Installation date:"$(date)"
Install Linux RHELV4-AS-U5-CS-S boot prompt:"$(cat /proc/cmdline)"
# -- OS Kernel Version  -----------------------------------------
$(uname -a)

# Devices order    ----------------------------------------------
cat /proc/partitions
$(cat /proc/partitions)

# Loaded Modules   ----------------------------------------------
lsmod
$(lsmod)
# IP configuration ----------------------------------------------
$(ifconfig)
# -- Disk Partitions ----------------------------------------------
fdisk -l
$(fdisk -l)

lvs
$(lvs)
# -- Services List ----------------------------------------------
$(chkconfig --list)
# ---------------------------------------------------------------
END-CMD
rpm -qa >/var/system-info/ks-rpm-list.txt
echo "Returned code = $? for rpm -qa>/var/system-info/ks-rpm-list.txt"
) 1>/root/post_install.log 2>&1
# ---------------------- second post section --------------------------------------
%post --nochroot
(
# copy the install helper script file
echo "Creating /root/script folder for install helper script!"
mkdir -p /tmp/one
echo "Returned code = $? for mkdir /tmp/one"
mount /dev/cdrom /tmp/one
rc=$?
echo "Returned code = $rc for mounting the DVD"
if [ $rc != 0 ] ; then
  mount -t iso9660 /tmp/cdrom /tmp/one
  echo "Returned code = $? for the second try mounting the DVD"
fi
#--------------------------------------
#   JIRA CMUN-4560
#--------------------------------------
mkdir -p /mnt/sysimage/root/script
echo "Returned code = $? for mkdir /mnt/sysimage/root/script"
cp /tmp/one/set_network.sh /mnt/sysimage/root/script
echo "Returned code = $? for copy /mnt/sysimage/root/script/set_network.sh file"
cp /tmp/one/setup_iscsi.sh /mnt/sysimage/root/script
echo "Returned code = $? for copy /mnt/sysimage/root/script/setup_iscsi.sh file"
cp /tmp/one/iscsi-ringbuffer-config /mnt/sysimage/root/script
echo "Returned code = $? for copy /mnt/sysimage/root/script/iscsi-ringbuffer-config file"
cp /tmp/one/RedHat/RPMS/iscsi-initiator-utils-4.0.3.0-7.i386.rpm /mnt/sysimage/root/
echo "Returned code = $? for copy /mnt/sysimage/root/iscsi-initiator-utils-4.0.3.0-7.i386.rpm file"
umount  /tmp/one
rmdir /tmp/one
cp /tmp/ks.cfg /mnt/sysimage/var/system-info
echo "Returned code = $? for copy /mnt/sysimage/tmp/ks.cfg file"
cp /tmp/ks.part /mnt/sysimage/var/system-info
echo "Returned code = $? for copy /mnt/sysimage/tmp/ks.part file"
cp /tmp/network.ks /mnt/sysimage/var/system-info
echo "Returned code = $? for copy /mnt/sysimage/tmp/network.ks file"
cp /tmp/netinfo /mnt/sysimage/var/system-info
echo "Returned code = $? for copy /mnt/sysimage/tmp/netinfo file"
cp /tmp/syslog /mnt/sysimage/var/system-info
echo "Returned code = $? for copy /mnt/sysimage/tmp/syslog file"
cp /tmp/anaconda.log /mnt/sysimage/var/system-info
echo "Returned code = $? for copy /mnt/sysimage/tmp/anaconda.log file"
# KickStart Post-install END
) 1>/mnt/sysimage/root/post_2_install.log 2>&1
